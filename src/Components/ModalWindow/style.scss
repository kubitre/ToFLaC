$XS:     320px;  
$S:     414px;   
$M:     769px;     
$L:     1025px; 
$XL:     1401px;     


@mixin MQ($canvas) {
    @if $canvas == XS {
     @media only screen and (min-width: $XS) { @content; } 
    }
    @if $canvas == S {
     @media only screen and (min-width: $S) { @content; } 
    }
    @else if $canvas == M {
     @media only screen and (min-width: $M) { @content; } 
    }
    @else if $canvas == L {
     @media only screen and (min-width: $L) { @content; } 
    }
    @else if $canvas == XL {
     @media only screen and (min-width: $XL) { @content; } 
    }
  }
  
  
  $sm_header_height: 40px;
  $sm_content_padding: 15px;
  
  // Inner Modal Color
  $segment_color: #ffffff;
  $segmentborder_color: #ffffff;
  
  // Fonts 
  $primary-font: "Montserrat", sans-serif;
  $maintextcolor: #404040;
  
  //Colors
  $red: #EF798A;
  $tan: #E1D59A;
  $green: #a9cd99;
  
  // rem fallback - credits: http://zerosixthree.se/
  
  @mixin transition($what, $speed, $ease, $delay) {
      -webkit-transition: $what $speed $ease $delay;
      -moz-transition: $what $speed $ease $delay;
      -ms-transition: $what $speed $ease $delay;
      -o-transition: $what $speed $ease $delay;
      transition: $what $speed $ease $delay;
  }
  
  
  // generic transform
  @mixin transform($transforms) {
       -moz-transform: $transforms;
         -o-transform: $transforms;
        -ms-transform: $transforms;
    -webkit-transform: $transforms;
            transform: $transforms;
  }
  // rotate
  @mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
  }
   
  // scale
  @mixin scale($scale) {
     @include transform(scale($scale));
  } 
  // translate
  @mixin translate ($x, $y) {
     @include transform(translate($x, $y));
  }
  
  
  @mixin box-shadow($top, $left, $blur, $depth, $color, $inset: false) {
    @if $inset {
      -webkit-box-shadow:inset $top $left $blur $depth $color;
      -moz-box-shadow:inset $top $left $blur $depth $color;
      box-shadow:inset $top $left $blur $depth $color;
    } @else {
      -webkit-box-shadow: $top $left $blur $depth $color;
      -moz-box-shadow: $top $left $blur $depth $color;
      box-shadow: $top $left $blur $depth $color;
    }
  }
  // border radius
  
  @mixin border-radius($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
  }
  
  @mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
  }
  
  %flexbox { @include flexbox; }
  
  //----------------------------------
  
  @mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
  
  %inline-flex { @include inline-flex; }
  
  @mixin flex-direction($value: row) {
    @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
    } @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
    } @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
  }
    // Shorter version:
    @mixin flex-dir($args...) { @include flex-direction($args...); }

  @mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
      -ms-flex-wrap: none;
    } @else { 
      -ms-flex-wrap: $value; 
    }
    flex-wrap: $value;
  }
  
  @mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
  }
  
  @mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
  }
  
  
  @mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
  }

  
  @mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
  }
  
  @mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
  }
  
  @mixin flex($fg: 1, $fs: null, $fb: null) {
      
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
  
    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
      $fg-boxflex: nth($fg, 1);
    }
  
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
  }
  
  
  @mixin justify-content($value: flex-start) {
    @if $value == flex-start {
      -webkit-box-pack: start;
      -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
      -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
    } @else if $value == space-around {
      -ms-flex-pack: distribute;    
    } @else {
      -webkit-box-pack: $value;
      -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
  }
    // Shorter version:
    @mixin flex-just($args...) { @include justify-content($args...); }
  
  @mixin align-items($value: stretch) {
    @if $value == flex-start {
      -webkit-box-align: start;
      -ms-flex-align: start;
    } @else if $value == flex-end {
      -webkit-box-align: end;
      -ms-flex-align: end;
    } @else {
      -webkit-box-align: $value;
      -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
  }
  
  @mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
      -ms-flex-item-align: start;
    } @else if $value == flex-end {
      -ms-flex-item-align: end;
    } @else {
      -ms-flex-item-align: $value;
    }
    align-self: $value;
  }
  
  
  @mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
      -ms-flex-line-pack: start;
    } @else if $value == flex-end {
      -ms-flex-line-pack: end;
    } @else {
      -ms-flex-line-pack: $value;
    }
    align-content: $value;
  }  

.modal_window{
    text-align: center;
  display: flex;
  flex-direction: column;
  height: 100%;
  position: absolute;

  .palette{
    background: white;
  }

  .header_part{
    margin-bottom: 25px;
    color: black;
    padding: 2px 15px;
    border-bottom: 2px solid black;
    font-size: 1.3em;
  }

  .body_part{
    color: black;
    padding: 25px;
  }

    z-index: 9999;
    background: rgba(0, 0, 0, 0.5);
    color: white;   

    justify-content: center;
    align-items: center;

    min-width: 100%;

    max-width: 60%;
    padding: 40px;
    @include border-radius(6px);
    @include box-shadow(0px, 0px, 80px, 0px, rgba(30,30,30,0.2));
    font-size: .9em;

    .closing_file{
        position: relative;
        margin-left: auto;
        top: 4px;
        width: 28px;
        height: 28px;
        opacity: 0.3;
    }
    .closing_file:hover {
        opacity: 1;     
    }
    .closing_file:before, .closing_file:after {
        position: absolute;
        right: 25;
        content: ' ';
        height: 16px;
        width: 2px;
        background-color: #000;
    }
    .closing_file:before {
        transform: rotate(45deg);
    }
    .closing_file:after {
        transform: rotate(-45deg);
    }
}